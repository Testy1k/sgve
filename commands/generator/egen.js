const { MessageEmbed } = require('discord.js');
const fs = require('fs');
const config = require('../../config.json');

const generated = new Set();

module.exports = {
  name: 'egen',
  description: 'Generate a specified service if stocked in estock folder.',

  execute(message, args, usedPrefix) {
    try {
      message.client.channels.cache.get(config.egenChannel).id;
    } catch (error) {
      if (error) {
        console.error(error);
      }

      if (config.command.error_message === true) {
        return message.channel.send(
          new MessageEmbed()
            .setColor(config.color.red)
            .setTitle('Error occurred!')
            .setDescription('Not a valid egenChannel specified!')
            .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
            .setTimestamp()
        );
      } else {
        return;
      }
    }

    if (message.channel.id === config.egenChannel) {
      if (generated.has(message.author.id)) {
        return message.channel.send(
          new MessageEmbed()
            .setColor(config.color.red)
            .setTitle('Cooldown!')
            .setDescription(`Please wait **${config.egenCooldown / 60000}m** before executing that command again!`)
            .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
            .setTimestamp()
        );
      } else {
        const service = args[0];

        if (!service) {
          return message.channel.send(
            new MessageEmbed()
              .setColor(config.color.red)
              .setTitle('Missing parameters!')
              .setDescription('You need to give a service name!')
              .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
              .setTimestamp()
          );
        }

        const filePath = `${__dirname}/../../estock/${args[0]}.txt`;

        fs.readFile(filePath, function (error, data) {
          if (!error) {
            data = data.toString();

            const position = data.toString().indexOf('\n');
            const firstLine = data.split('\n')[0];

            if (position === -1) {
              return message.channel.send(
                new MessageEmbed()
                  .setColor(config.color.red)
                  .setTitle('Generator error!')
                  .setDescription(`I do not find the \`${args[0]}\` service in my estock!`)
                  .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
                  .setTimestamp()
              );
            }

            const generatedCode = firstLine; // Save the generated code

            const currentTime = new Date();
            const formattedTime = `${currentTime.getFullYear()}-${(currentTime.getMonth() + 1)
              .toString()
              .padStart(2, '0')}-${currentTime.getDate().toString().padStart(2, '0')} ${
              currentTime.getHours().toString().padStart(2, '0')
            }:${currentTime.getMinutes().toString().padStart(2, '0')}:${currentTime.getSeconds().toString().padStart(2, '0')}`;

            const redemptionEmbed = new MessageEmbed()
              .setColor(config.color.green)
              .setTitle(`${config.serverName}`)
              .setDescription(`**Follow these steps to redeem your code:**\nStep 1: Click on this [LINK](${config.link}) , complete some steps and register with your Discord nickname.\nStep 2: Go to the Ticket channel\nStep 3: Click on Redeem a code\nStep 4: Send this code to staff:`)
              .addField('Your service', `\`${service}\``)
              .addField('Your order number', `\`${generatedCode}\``)
              .setDescription('Thank you!\nPlease wait until the bot sends your account.')
              .setFooter(`Generated by ${config.servername} • ${formattedTime} • Member ID: ${message.author.id}`);

            // DM the user with the embed
            message.author.send(redemptionEmbed).catch((err) => {
              console.error(`Failed to send DM to ${message.author.tag}: ${err}`);
            });

            // Save the code to extremepay.txt with the service name and member ID
            const payoutFilePath = `${__dirname}/../../extremepay.txt`;
            fs.appendFileSync(payoutFilePath, `${generatedCode} - ${service} - ${message.author.id}\n`);

            if (position !== -1) {
              data = data.substr(position + 1);

              fs.writeFile(filePath, data, function (error) {
                message.channel.send(
                  new MessageEmbed()
                    .setColor(config.color.green)
                    .setTitle('Code generated successfully!')
                    .setDescription(`Check your DMs, ${message.author}! If you do not receive the message, please unlock your DMs!`)
                    .setImage(config.gif)
                    .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
                    .setTimestamp()
                );

                generated.add(message.author.id);

                setTimeout(() => {
                  generated.delete(message.author.id);
                }, config.egenCooldown * 60 * 1000);

                if (error) {
                  console.error(error);
                }
              });
            } else {
              return message.channel.send(
                new MessageEmbed()
                  .setColor(config.color.red)
                  .setTitle('Generator error!')
                  .setDescription(`The \`${args[0]}\` service is empty!`)
                  .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
                  .setTimestamp()
              );
            }
          } else {
            return message.channel.send(
              new MessageEmbed()
                .setColor(config.color.red)
                .setTitle('Generator error!')
                .setDescription(`Service \`${args[0]}\` does not exist!`)
                .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
                .setTimestamp()
            );
          }
        });
      }
    } else {
      message.channel.send(
        new MessageEmbed()
          .setColor(config.color.red)
          .setTitle('Wrong command usage!')
          .setDescription(`You cannot use the \`egen\` command in this channel! Try it in <#${config.egenChannel}>!`)
          .setFooter(message.author.tag, message.author.displayAvatarURL({ dynamic: true, size: 64 }))
          .setTimestamp()
      );
    }
  },
};
